#!/usr/bin/env node

const { resolve } = require('path');
const { ensureDir, copySync } = require('fs-extra');
const program = require('commander');
const chokidar = require('chokidar');
const validate = require('../lib/validate');
const Manager = require('../lib/manager');
const packageInfo = require('../package.json');

const { log, error } = console;

function getConfig(filepath) {
  const resolved = require.resolve(filepath);
  if (require.cache[resolved]) {
    delete require.cache[resolved];
  }
  return require(filepath); // eslint-disable-line
}

program.version(packageInfo.version)
  .option('-c, --config <path>', 'set config file path', 'muggle.config.js');

program
  .command('new [name]')
  .description('create a directory for your new site')
  .action((name) => {
    const src = resolve(__dirname, '../example');
    copySync(src, name);
    log('New site created!');
  });

program
  .command('serve')
  .description('run a dev server, port defaults to :8080')
  .option('-p, --port <port>', 'Set the server port', 8080)
  .action(async (options) => {
    const configFile = resolve(process.cwd(), options.parent.config);
    const config = getConfig(configFile);
    const errors = validate(config);
    if (errors.length > 0) {
      const messages = errors.map(err => `  ${err.message}`).join('\n');
      error(`${configFile} syntax error:`);
      error(messages);
      process.exit();
    }

    const manager = new Manager(config);
    await manager.serve(options.port);

    const watcher = chokidar.watch(configFile);
    watcher.on('change', () => {
      setTimeout(() => {
        const newConfig = getConfig(configFile);
        manager.changeConfig(newConfig);
      }, 100);
    });
  });

program
  .command('build')
  .description('generate HTML files in the public directory')
  .action(async (options) => {
    process.env.NODE_ENV = 'production';

    const configFile = resolve(process.cwd(), options.parent.config);
    const config = getConfig(configFile);
    await ensureDir(config.public);

    const errors = validate(config);
    if (errors.length > 0) {
      const messages = errors.map(err => `  ${err.message}`).join('\n');
      error(`${configFile} syntax error:`);
      error(messages);
      process.exit();
    }

    const manager = new Manager(config);
    await manager.process();
    await manager.write();

    log('Generated!');
    process.exit();
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
