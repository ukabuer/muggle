#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const { readFile, ensureDir, copySync } = require('fs-extra');
const createServer = require('../lib/serve');
const parse = require('../lib/parse');
const generate = require('../lib/generate');
const { addTailSlash: ATS } = require('../lib/utils');

program.version('0.1.0')
  .option('-s, --site <path>', 'set site data file path', './site.json')
  .option('-c, --content <path>', 'set the contents directory', './contents/')
  .option('-t, --template <path>', 'set the templates directory', './templates/')
  .option('-p, --public <path>', 'set the public directory', './public/');

program
  .command('new [name]')
  .description('create a directory for your new site')
  .action((name) => {
    const src = path.resolve(__dirname, '../example');
    copySync(src, name);
    console.log('New site created!');
  });

program
  .command('serve')
  .description('run a dev server, port defaults to :8080')
  .option('-p, --port <port>', 'Set the server port', 8080)
  .action(async (options) => {
    const {
      site,
      content,
      template,
      public: publicDir,
    } = options.parent;
    const config = {
      port: options.port,
      site,
      content: ATS(content),
      template: ATS(template),
      public: ATS(publicDir),
    };
    createServer(config);
  });

program
  .command('gen')
  .description('generate HTML files in the public directory')
  .action(async (options) => {
    const {
      site,
      content,
      template,
      public: publicDir,
    } = options.parent;
    const config = {
      site,
      public: ATS(publicDir),
      content: ATS(content),
      template: ATS(template),
    };
    await ensureDir(publicDir);

    const json = await readFile(config.site, 'utf8');
    const data = JSON.parse(json);

    const pages = await parse(data.pages, config);

    const tasks = Object.keys(pages).map(p => generate(pages[p], pages, config));
    await Promise.all(tasks);

    console.log('Generated!');
    process.exit();
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
