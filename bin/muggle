#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const { readFile, ensureDir, copySync } = require('fs-extra');
const createServer = require('../lib/serve');
const parse = require('../lib/parse');
const generate = require('../lib/generate');

program.version('0.1.0')
  .option('-s, --site <path>', 'set site data file path', './site.json')
  .option('-c, --content <path>', 'set the contents directory', './contents/')
  .option('-t, --template <path>', 'set the templates directory', './templates/')
  .option('-p, --public <path>', 'set the public directory', './public/');

program
  .command('new [name]')
  .description('create a directory for your new site')
  .action((name) => {
    const src = path.resolve(__dirname, '../example');
    copySync(src, name);
    console.log('New site created!');
  });

program
  .command('serve')
  .description('run a dev server, port defaults to :8080')
  .option('-p, --port <port>', 'Set the server port', 8080)
  .action((options) => {
    const {
      site,
      content,
      template,
      public: publicDir,
    } = options.parent;
    const config = {
      port: options.port,
      site,
      content,
      template,
      public: publicDir,
    };
    ensureDir(publicDir)
      .then(() => {
        createServer(config);
      });
  });

program
  .command('gen')
  .description('generate HTML files in the public directory')
  .action((options) => {
    const { site, content, template } = options.parent;
    const config = {
      public: options.parent.public,
      site,
      content,
      template,
    };
    readFile(config.site, 'utf8')
      .then(async (json) => {
        const data = JSON.parse(json);
        const tasks = data.pages.map(pagte => parse(pagte, config));
        const results = await Promise.all(tasks);
        return results.reduce((all, cur) => all.concat(cur), []);
      })
      .then((routes) => {
        const tasks = routes.map(route => generate(route, config));
        return Promise.all(tasks);
      })
      .then(() => {
        console.log('Generated!');
        process.exit();
      });
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
